Install postman
Install Node.js. NPM will be installed along with it.(Official link below)
https://www.npmjs.com/get-npm
Command to confirm whether Node and NPM has been installed successfully (NPM and Node should be set in PATH environment variable, so that it can be accessed from any location)
node -v
npm -v
npm install -g newman to install globally
to install to a specific folder : npm init-->npm install newman --save
install jenkins
install nodejs plugin for jenkins
install java SDK 8+
Create a collection in postman and 2 folders, one for positive test cases and one for negative
get the sample contact list API from postman documenter
Add those requests in postman

Common Negative scenarios:
Record not found
request is sent with missing required info
value has too many chars
value has invalid chars
value isn't in the correct format (eg: email has .com missing)

providing invalid ID in a GET,POST,DELETE will result in 404 not found
if all the values required are not provided for a POST/PUT request, then 400 Bad request will be thrown
value has too many chars - 400 Bad request
value has invalid chars - 400 Bad request
value isn't in the correct format - 400 Bad request

Environments can be created by clicking on Setting icon on right top
Initial value = value saved in env. file
current value = temp value used for testing
Use 2 curly braces for varialble names

To save a value from a response in a variable and use it in subsequent steps
Go to Tests section of that particular request
var jsonData = pm.response.json();
Click on set an env. variable from Snippets (or)
pm.environment.set("variable name",jsonData.key for which we are trying to retrieve the value);

Assertions to be added
Status code -  200
Response Body - Eg: Firstname, lastname, email etc.
Header values - Eg: Content type (mainly used for security and performance checks)
Security assertion:
pm.test("Content-Type is application/json",function(){
	pm.response.to.have.header("Content-Type","application/json; charset=utf-8");
});
x-xss header also should be asserted, it protects against cross site attacks
Performance assertion:
Response time assertion, to verify if the response takes reasonable amount of time to come back
JSON assertions

JSON Structure:
Json composes of key value pairs.
A group of key value pairs is called an object
A group of objects is called an array

Newman commands
export the postman collections as json
export the environment as well
navigate to the folder where the above files are present
newman run <collection file name> -e <env file name>
newman run -h for help

Jenkins setup
make sure nodejs plugin is installed
manage jenkins--> global props -->check gthe env. vars--> name=newman and value=path to newman in local (will be present inside node modules)
manage jenkins--> global tool config-->NodeJS installations
Name = NodeJS
Install automatically - check
Global npm packages to install = newman
refresh hours = 72

Setting up a project in jenkins
Dashboard --> New Item -> Provide a name--> Freestyle project
Build Environment--> check Provide node and npm folder
Build --> Execute shell -> in command type --> newman run <collection file name> -e <env file name>
Build now-->console output--> it will fail
Note the Building in workspace <path>
Navigate to above path in local and copy those collection and env.json to this path
Build now, it will pass

Creating a nightly job
Configure-->Build triggers-->Build periodically-->0 5 * * *


Tips:
Try adding common assertions like response time assertions to collections instead of individual tests
Learn to use the postman console efficiently
Diff between body assertion and JSON assertion is that, in body assertion we are looking for a particular value somewhere in the response body, but in the JSON assertion, we are asserting a value for a particular key
Practice writing assertions to Nested JSONs
Practice on public APIs such as 
https://restcountries.eu
https://petstore.swagger.io
Follow the weekly blog thinkingtester.com

Useful info:
To export the report as a .txt file
newman run abc_collection.json /all > newman_report.txt

To generate xunit report
npm i -g xunit-viewer
newman run ${yourCollectionPath}\${yourCollectionName}.json -r cli,junit
xunit-viewer --results=newman --output=test_results.html

If a request demands new authorization token each time it's sent, running the requests as a collection might be a little tricky. 
Postman provides us an option to parameterize the access token generation process by adding a pre-request script and environment variables.
Parameterize the authorization at the collection level:
let tokenUrl = 'url';
let clientId = '<>';
let clientSecret = '<>';
let scope = '<>';
 
let getTokenRequest = {
    method: 'POST',
    url: tokenUrl,
    auth: {
        type: "basic",
        basic: [
            { key: "username", value: username },
            { key: "password", value: password }
        ]
    },
    body: {
        mode: 'urlencoded',
        urlencoded: [
            { key: 'grant_type', value: 'username' },
            { key: 'scope', value: scope }
        ]
 
    }
     
};
 
pm.sendRequest(getTokenRequest, (err, response) => {
    let jsonResponse = response.json(),
        newAccessToken = jsonResponse.access_token;
 
    console.log({ err, jsonResponse, newAccessToken })
     
    pm.globals.set('accessToken', newAccessToken);
    pm.environment.set('accessToken', newAccessToken);
    pm.variables.set('accessToken', newAccessToken);
});

Dummy Package.json
{
  "name": "dummy",
  "version": "1.0.0",
  "description": "Sample npm project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": " <<name>",
  "license": "ISC",
  "dependencies": {
    "newman": "^4.5.4"
  }
}

Make some modifications in the package.json file
Remove the "main"
Corresponding to the test value, add the collection name
Remove license details and save the file

To remove useless packages
rm -rf -- node_modules/

fly -t eom sp -c pipeline.yml -p <name of the pipeline>  – to build a pipeline using the resources and jobs mentioned in the pipeline.yml file.